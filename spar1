#!/bin/bash
SPAR_BASE=/spar
SPAR_LOGS=$SPAR_BASE/log
mkdir -p $SPAR_LOGS

exec > >(tee $SPAR_LOGS/sparbuild.$$.$(date +'%Y-%m-%d.%H%M').log) 2>&1
set -e

SPAR=$SPAR_BASE/root
SPAR_CACHE=$SPAR_BASE/cache

cat <<EOF
 ######  ########     ###    ########
##    ## ##     ##   ## ##   ##     ##
##       ##     ##  ##   ##  ##     ##
 ######  ########  ##     ## ########
      ## ##        ######### ##   ##
##    ## ##        ##     ## ##    ##
 ######  ##        ##     ## ##     ##


EOF
source $SPAR_BASE/spar.fn

echo; echo ">> setting up spar environment"
for mounted in dev{/pts,} proc sys run; do
	if grep -q " $SPAR/$mounted " /proc/self/mounts; then
		sudo umount $SPAR/$mounted
	fi
done
sudo rm -fr --one-file-system $SPAR
mkdir -pv $SPAR/{source,tools}
sudo ln -sfv $SPAR/tools/ /

cat >$SPAR/.build <<EOF
export SPAR_BASE=$SPAR_BASE
export SPAR=\$SPAR_BASE/root
export SPAR_TGT=$(uname -m)-spar-linux-gnu
if [[ -f /.build ]]; then
  export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/tools/bin
else
  export PATH=/tools/bin:/bin:/usr/bin
fi

# versions
EOF
for pkg in $(all_packages); do
	v=$(version_of $pkg)
	if [[ $v != '~' ]]; then
		pkg=$(echo "$pkg" | sed -e 's/[^a-zA-Z0-9_]/_/g')
		echo "export ${pkg}_version=$v" >>$SPAR/.build
	fi
done
source $SPAR/.build
cd $SPAR/source

echo; echo ">> downloading packages"
for x in $(all_packages); do
	echo -n "$x... "
	download $x
	echo OK
done

echo; echo ">> preparing host system"
type gawk | sudo apt-get install -yy gawk
type m4   | sudo apt-get install -yy m4

echo; echo ">> building binutils (stage 1)"
unpack binutils
mkdir -pv build/binutils.1
pushd build/binutils.1
  ../../binutils-$(version_of binutils)/configure  \
    --prefix=/tools                                \
    --with-sysroot=$SPAR                           \
    --with-lib-path=/tools/lib                     \
    --target=$SPAR_TGT                             \
    --disable-nls                                  \
    --disable-werror
  make
  case $(uname -m) in
    x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
  esac
  make install
popd


echo; echo ">> building gcc (stage 1)"
unpack gcc
pushd gcc-$(version_of gcc)
  for what in gmp mpc mpfr isl; do
    unpack $what
    mv $what-$(version_of $what) $what
  done

  # retarget gcc to use the stage1 dynamic linker under /tools
  for file in gcc/config/{linux,i386/linux{,64}}.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    touch $file.orig
  done

  case $(uname -m) in
    x86_64)
      sed -e '/m64=/s/lib64/lib/' \
          -i.orig gcc/config/i386/t-linux64
      ;;
  esac
popd
mkdir -pv build/gcc.1
pushd build/gcc.1
  ../../gcc-$(version_of gcc)/configure              \
    --target=$SPAR_TGT                               \
    --prefix=/tools                                  \
    --with-glibc-version=2.11                        \
    --with-sysroot=$SPAR                             \
    --with-newlib                                    \
    --without-headers                                \
    --with-local-prefix=/tools                       \
    --with-native-system-header-dir=/tools/include   \
    --disable-nls                                    \
    --disable-shared                                 \
    --disable-multilib                               \
    --disable-decimal-float                          \
    --disable-threads                                \
    --disable-libatomic                              \
    --disable-libgomp                                \
    --disable-libmpx                                 \
    --disable-libquadmath                            \
    --disable-libssp                                 \
    --disable-libvtv                                 \
    --disable-libstdcxx                              \
    --enable-languages=c,c++
  make -j2
  make install
popd

echo; echo ">> unpacking linux headers for glibc"
unpack linux
pushd linux-$(version_of linux)
  make mrproper
  make INSTALL_HDR_PATH=dest headers_install
  cp -rv dest/include/* /tools/include
popd

echo; echo ">> building glibc (stage 1)"
unpack glibc
mkdir -pv build/glibc
pushd build/glibc
  ../../glibc-$(version_of glibc)/configure                         \
    --prefix=/tools                                                 \
    --host=$SPAR_TGT                                                \
    --build=$(../../glibc-$(version_of glibc)/scripts/config.guess) \
    --enable-kernel=3.2                                             \
    --with-headers=/tools/include                                   \
    libc_cv_forced_unwind=yes                                       \
    libc_cv_c_cleanup=yes
  make -j2
  make install
popd

# clue gcc into glibc-provided c runtime object files
#ln -sv /tools/lib/crt*.o /tools/lib/gcc/$SPAR_TGT/$(version_of gcc)/

echo; echo ">> checking stage 1 toolchain for fitness"
pushd build
  echo 'int main() { return 0; }' > dummy.c
  $SPAR_TGT-gcc dummy.c
  readelf -l a.out | grep -q ': /tools'
  ./a.out
  rm -f dummy.c a.out
popd

echo; echo ">> building libstdc++ (stage 1)"
mkdir -pv build/libstdc++
pushd build/libstdc++
  ../../gcc-$(version_of gcc)/libstdc++-v3/configure \
      --host=$SPAR_TGT                               \
      --prefix=/tools                                \
      --disable-multilib                             \
      --disable-nls                                  \
      --disable-libstdcxx-threads                    \
      --disable-libstdcxx-pch                        \
      --with-gxx-include-dir=/tools/$SPAR_TGT/include/c++/$(version_of gcc)
  make -j2
  make install
popd

echo "building binutils (stage 2)"
mkdir -pv build/binutils.2
pushd build/binutils.2
  CC=$SPAR_TGT-gcc                                \
  AR=$SPAR_TGT-ar                                 \
  RANLIB=$SPAR_TGT-ranlib                         \
  ../../binutils-$(version_of binutils)/configure \
    --prefix=/tools                               \
    --disable-nls                                 \
    --disable-werror                              \
    --with-lib-path=/tools/lib                    \
    --with-sysroot
  make -j2
  make install

  # prep the linker for "re-adjusting"
  make -C ld clean
  make -C ld LIB_PATH=/usr/lib:/lib
  cp -v ld/ld-new /tools/bin
popd

echo "building gcc (stage 2)"
cat gcc-$(version_of gcc)/gcc/{limitx,glimits,limity}.h > \
  $(dirname $($SPAR_TGT-gcc -print-libgcc-file-name))/include-fixed/limits.h
mkdir -pv build/gcc.2
pushd build/gcc.2
  CC=$SPAR_TGT-gcc                                   \
  CXX=$SPAR_TGT-g++                                  \
  AR=$SPAR_TGT-ar                                    \
  RANLIB=$SPAR_TGT-ranlib                            \
  ../../gcc-$(version_of gcc)/configure              \
    --prefix=/tools                                  \
    --with-local-prefix=/tools                       \
    --with-native-system-header-dir=/tools/include   \
    --enable-languages=c,c++                         \
    --disable-libstdcxx-pch                          \
    --disable-multilib                               \
    --disable-bootstrap                              \
    --disable-libgomp
  make -j2
  make install
popd
ln -sfv gcc /tools/bin/cc

echo; echo ">> checking stage 2 toolchain for fitness"
pushd build
  echo 'int main() { return 0; }' > dummy.c
  $SPAR_TGT-gcc dummy.c
  readelf -l a.out | grep -q ': /tools'
  ./a.out
  rm -f dummy.c a.out
popd

export CC=$SPAR_TGT-gcc
export CXX=$SPAR_TGT-g++

echo; echo ">> building tcl (bootstrap)"
unpack tcl
mkdir -pv build/tcl
pushd build/tcl
  ../../tcl$(version_of tcl)/unix/configure \
    --prefix=/tools
  make -j2
  #TZ=UTC make test
  make install

  # make the lib writable so we can strip it later
  chmod -v u+w /tools/lib/libtcl*.so
  make install-private-headers
  ln -sfv tclsh$(versionxy_of tcl) /tools/bin/tclsh
popd

echo; echo ">> building expect (bootstrap)"
unpack expect
mkdir -pv build/expect
pushd build/expect
  ../../expect$(version_of expect)/configure \
    --prefix=/tools                          \
    --with-tcl=/tools/lib                    \
    --with-tclinclude=/tools/include
  make -j2
  #make test
  make SCRIPTS="" install
popd

echo; echo ">> building dejagnu (bootstrap)"
unpack dejagnu
mkdir -pv build/dejagnu
pushd build/dejagnu
  ../../dejagnu-$(version_of dejagnu)/configure \
    --prefix=/tools
  make -j2
  make install
  #make check
popd

echo; echo ">> building check (bootstrap)"
unpack check
mkdir -pv build/check
pushd build/check
  PKG_CONFIG= \
  ../../check-$(version_of check)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building ncurses (bootstrap)"
unpack ncurses
sed -i s/mawk// ncurses-$(version_of ncurses)/configure    # prefer gawk

mkdir -pv build/ncurses
pushd build/ncurses
  ../../ncurses-$(version_of ncurses)/configure \
    --prefix=/tools                             \
    --with-shared                               \
    --without-debug                             \
    --without-ada                               \
    --enable-widec                              \
    --enable-overwrite
  make -j2
  make install
popd

echo; echo ">> building bash (bootstrap)"
unpack bash
mkdir -pv build/bash
pushd build/bash
  ../../bash-$(version_of bash)/configure \
    --prefix=/tools                       \
    --without-bash-malloc
  make -j2
  #make tests
  make install
popd
ln -sfv bash /tools/bin/sh

echo; echo ">> building flex (bootstrap)"
unpack flex
mkdir -pv build/flex
pushd build/flex
  ../../flex-$(version_of flex)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd
ln -sfv flex /tools/bin/lex

echo; echo ">> building bison (bootstrap)"
unpack bison
mkdir -pv build/bison
pushd build/bison
  ../../bison-$(version_of bison)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building bzip2 (bootstrap)"
unpack bzip2
# no ./configure: no build dir possible
pushd bzip2-$(version_of bzip2)
  make
  make PREFIX=/tools install
popd

echo; echo ">> building coreutils (bootstrap)"
unpack coreutils
mkdir -pv build/coreutils
pushd build/coreutils
  ../../coreutils-$(version_of coreutils)/configure \
    --prefix=/tools \
    --enable-install-program=hostname
  make -j2
  #make check-very-expensive
  make install
popd

echo; echo ">> building diffutils (bootstrap)"
unpack diffutils
mkdir -pv build/diffutils
pushd build/diffutils
  ../../diffutils-$(version_of diffutils)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building file (bootstrap)"
unpack file
mkdir -pv build/file
pushd build/file
  ../../file-$(version_of file)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building findutils (bootstrap)"
unpack findutils
mkdir -pv build/findutils
pushd build/findutils
  ../../findutils-$(version_of findutils)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building gawk (bootstrap)"
unpack gawk
mkdir -pv build/gawk
pushd build/gawk
  ../../gawk-$(version_of gawk)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building gettext (bootstrap)"
unpack gettext
mkdir -pv build/gettext
pushd build/gettext
  EMACS="no" \
  ../../gettext-$(version_of gettext)/gettext-tools/configure \
    --prefix=/tools                                           \
    --disable-shared
  make -j2 -C gnulib-lib
  make -j2 -C intl pluralx.c
  make -j2 -C src msgfmt
  make -j2 -C src msgmerge
  make -j2 -C src xgettext
  cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin
popd

echo; echo ">> building grep (bootstrap)"
unpack grep
mkdir -pv build/grep
pushd build/grep
  ../../grep-$(version_of grep)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building gzip (bootstrap)"
unpack gzip
mkdir -pv build/gzip
pushd build/gzip
  ../../gzip-$(version_of gzip)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building m4 (bootstrap)"
unpack m4
mkdir -pv build/m4
pushd build/m4
  ../../m4-$(version_of m4)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building make (bootstrap)"
unpack make
mkdir -pv build/make
pushd build/make
  ../../make-$(version_of make)/configure \
    --prefix=/tools                       \
    --without-guile
  make -j2
  #make check
  make install
popd

echo; echo ">> building patch (bootstrap)"
unpack patch
mkdir -pv build/patch
pushd build/patch
  ../../patch-$(version_of patch)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building perl (bootstrap)"
unpack perl
pushd perl-$(version_of perl)
  sed -e '9751 a#ifndef PERL_IN_XSUB_RE' \
      -e '9808 a#endif'                  \
      -i regexec.c
  sh Configure -des -Dprefix=/tools -Dlibs=-lm
  make
  cp -v perl cpan/podlators/scripts/pod2man /tools/bin
  mkdir -pv /tools/lib/perl5/$(version_of perl)
  cp -Rv lib/* /tools/lib/perl5/$(version_of perl)
popd

echo; echo ">> building sed (bootstrap)"
unpack sed
mkdir -pv build/sed
pushd build/sed
  ../../sed-$(version_of sed)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building tar (bootstrap)"
unpack tar
mkdir -pv build/tar
pushd build/tar
  ../../tar-$(version_of tar)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building texinfo (bootstrap)"
unpack texinfo
mkdir -pv build/tar
pushd build/tar
  ../../texinfo-$(version_of texinfo)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> building util-linux (bootstrap)"
unpack util-linux
mkdir -pv build/tar
pushd build/tar
  ../../util-linux-$(version_of util-linux)/configure  \
    --prefix=/tools                                    \
    --without-python                                   \
    --disable-makeinstall-chown                        \
    --without-systemdsystemunitdir                     \
    --without-ncurses                                  \
    PKG_CONFIG=""
  make -j2
  make install
popd

echo; echo ">> building xz-utils (bootstrap)"
unpack xz
mkdir -pv build/xz
pushd build/xz
  ../../xz-$(version_of xz)/configure \
    --prefix=/tools
  make -j2
  #make check
  make install
popd

echo; echo ">> tidying up bootstrap environment"
strip --strip-debug    /tools/lib/*     || true
strip --strip-unneeded /tools/{,s}bin/* || true
rm -rf /tools/{,share}/{info,man,doc}
rm -rf $SPAR/source
mkdir $SPAR/source
cd $SPAR/source

echo; echo ">> setting permissions and ownership"
sudo chown -R root:root $SPAR/tools

echo; echo ">> creating device files"
mkdir -pv $SPAR/{dev,proc,sys,run}
sudo mknod -m 600 $SPAR/dev/console c 5 1
sudo mknod -m 666 $SPAR/dev/null    c 1 3

echo; echo ">> setting up base mount points"
sudo mount -v --bind /dev $SPAR/dev
sudo mount -vt devpts devpts $SPAR/dev/pts -o gid=5,mode=620
sudo mount -vt proc proc $SPAR/proc
sudo mount -vt sysfs sysfs $SPAR/sys
sudo mount -vt tmpfs tmpfs $SPAR/run
if [ -h $SPAR/dev/shm ]; then
  mkdir -pv $SPAR/$(readlink $SPAR/dev/shm)
fi

echo; echo ">> setting up root directory structure"
mkdir -pv $SPAR/{bin,boot,etc/{opt,sysconfig},home,lib/firmware,mnt,opt}
mkdir -pv $SPAR/{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 $SPAR/root
install -dv -m 1777 $SPAR/tmp $SPAR/var/tmp
mkdir -pv $SPAR/usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv $SPAR/usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -pv $SPAR/usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -pv $SPAR/usr/libexec
mkdir -pv $SPAR/usr/{,local/}share/man/man{1..8}
case $(uname -m) in
   x86_64) mkdir -pv $SPAR/lib64 ;;
esac
mkdir -pv $SPAR/var/{log,mail,spool}
rm -f $SPAR/var/{run,lock}
ln -sfv /run      $SPAR/var/run
ln -sfv /run/lock $SPAR/var/lock
mkdir -pv $SPAR/var/{opt,cache,lib/{color,misc,locate},local}

echo; echo ">> linking required tools into root directory structure"
ln -sfv /tools/bin/{bash,cat,dd,echo,ln,pwd,rm,stty} $SPAR/bin
ln -sfv bash                                         $SPAR/bin/sh
ln -sfv /tools/bin/{install,perl}                    $SPAR/usr/bin
ln -sfv /tools/lib/libgcc_s.so{,.1}                  $SPAR/usr/lib
ln -sfv /tools/lib/libstdc++.{a,so{,.6}}             $SPAR/usr/lib
sed 's/tools/usr/' $SPAR/tools/lib/libstdc++.la > $SPAR/usr/lib/libstdc++.la

echo; echo ">> setting up legacy /etc/mtab"
ln -sfv /proc/self/mounts $SPAR/etc/mtab

echo; echo ">> configuring passwd + group databases"
cat > $SPAR/etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF
cat > $SPAR/etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF

echo; echo ">> setting up system accounting files"
touch $SPAR/var/log/{btmp,lastlog,faillog,wtmp}
sudo chgrp -v 13   $SPAR/var/log/lastlog # gid 13 = utmp (see above)
sudo chmod -v 664  $SPAR/var/log/lastlog
     chmod -v 600  $SPAR/var/log/btmp

echo; echo ">> preparing for stage 2"
for what in man-pages \
            glibc glibc-p1 \
            zlib \
            file \
            readline \
            m4 \
            bc \
            binutils \
            gmp \
            mpfr \
            mpc \
            gcc
do
  echo ">> downloading '$what' for stage 2"
  unpack $what
done

pushd glibc-$(version_of glibc)
  patch -Np1 -i ../glibc-2.26-fhs-1.patch
popd
ln -sfv /tools/lib/gcc $SPAR/usr/lib

echo
echo "DONE (for now)"

